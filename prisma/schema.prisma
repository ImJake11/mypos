// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id         String    @id @unique @default(uuid())
  content    String
  product    Product[]
  url        String?
  imageId    String
  isArchived Boolean   @default(false)
}

model Product {
  id                    String               @id @unique @default(uuid())
  name                  String               @default("")
  description           String?
  categoryID            String
  category              Category             @relation(fields: [categoryID], references: [id])
  sellingPrice          Int
  costPrice             Int
  coverImageId          String
  tax                   Int
  bulkEnabled           Boolean              @default(false)
  highlights            String?
  stock                 Int
  lowStock              Int
  variants              Variants[]
  coverImage            String
  photoSnapshots        String[]
  bulkTier              BulkTire[]
  promotionalDiscountID String?
  promotionalDiscount   PromotionalDiscount? @relation(fields: [promotionalDiscountID], references: [id])
  createdAt             DateTime             @default(now())
  isActive              Boolean              @default(true)
  isFavorite            Boolean              @default(false)
  vatStatus             Vat                  @relation(fields: [vatId], references: [id])
  vatId                 String               @default("48156bcc-e71b-48c6-8520-88b74b223676")
  CartCache             CartCache[]
  ProductExpenses       ProductExpenses[]
  lastSoldDate          DateTime?
}

model Variants {
  id               String             @id @unique @default(uuid())
  name             String
  price            Int
  stock            Int
  imageUrl         String
  isPositive       Boolean            @default(false)
  product          Product            @relation(fields: [productId], references: [id])
  productId        String
  isArchived       Boolean            @default(false)
  details          String?
  CartCache        CartCache[]
  TransactionItems TransactionItems[]
  lastSoldDate     DateTime?
}

model BulkTire {
  id               String             @id @unique @default(uuid())
  product          Product            @relation(fields: [productId], references: [id])
  productId        String
  quantity         Int
  discount         Int
  CartCache        CartCache[]
  TransactionItems TransactionItems[]
}

model PromotionalDiscount {
  id             String      @id @unique @default(uuid())
  expirationDate String
  discountRate   Float
  description    String?
  CartCache      CartCache[]
  Product        Product[]
}

model Vat {
  id           String    @id @unique @default(uuid())
  settingKey   String
  rate         Int
  lastModified DateTime  @default(now())
  description  String
  Product      Product[]
}

model TransactionDetails {
  transactionId          String             @id @unique @default(uuid())
  date                   DateTime           @default(now())
  userid                 String
  taxablSales            Decimal
  totalValSales          Decimal
  nonTaxableSales        Decimal
  exemptSales            Decimal
  netTotal               Decimal
  amountPaid             Decimal
  changeGiven            Decimal
  paymentMethod          String
  paymentProvider        String?
  discountID             String?
  reason                 String?
  purchasedItems         TransactionItems[]
  referenceId            String?
  status                 String
  referenceTransactionID String?
}

model TransactionItems {
  id            String             @id @unique @default(uuid())
  transactionId String
  transaction   TransactionDetails @relation(fields: [transactionId], references: [transactionId])
  productId     String
  product       Variants           @relation(references: [id], fields: [productId])
  quantity      Int
  bulkTierID    String?
  bulkTier      BulkTire?          @relation(references: [id], fields: [bulkTierID])
  unitPrice     Int
  vatStatus     String
}

model CartCache {
  cartId                String               @id @unique @default(uuid())
  productId             String
  mainProduct           Product              @relation(fields: [mainProductID], references: [id])
  mainProductID         String
  product               Variants             @relation(fields: [productId], references: [id])
  quantity              Int
  variantUnitPrice      Int
  total                 Int
  promotionalDiscount   PromotionalDiscount? @relation(fields: [promotionalDiscountID], references: [id])
  promotionalDiscountID String?
  bulkPricing           BulkTire?            @relation(fields: [bulkPricingID], references: [id])
  bulkPricingID         String?
  userId                String
  vatStatus             String
}

model Notifications {
  id        String   @id @unique @default(uuid())
  title     String
  message   String
  type      String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  relatedTo String?
  relatedID String?
  userID    String   @default("tempo")
}

model ProductExpenses {
  id        String   @unique @default(uuid())
  productID String   @unique
  product   Product  @relation(fields: [productID], references: [id])
  timestamp DateTime @default(now())
  total     Float
}

model ActivityLogs {
  id        String   @id @unique @default(uuid())
  timestamp DateTime @default(now())
  action    String
  status    String
  userId    String
  relatedId String
}

model Users {
  id               String   @id @unique @default(uuid())
  email            String   @unique
  password         String
  username         String
  role             String   @default("user")
  isVerified       Boolean  @default(false)
  isActive         Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  otp              String?
  provider         String
  relateProviderID String?
  photoUrl         String?
}

model ValidationToken {
  id                    String   @id @unique @default(uuid())
  created_at            DateTime @default(now())
  exp_at                DateTime
  token                 String
  email                 String   @unique
  verification_attempts Int?     @default(0)
}

model SessionToken {
  id         String   @id @unique @default(uuid())
  created_at DateTime @default(now())
  exp_at     DateTime
  token      String
  email      String   @unique
}

model AccountManagement {
  id                        String   @id @unique @default(uuid())
  ip                        String   @unique
  account_creation_attempts Int
  reset_at                  DateTime
  user_agent                String?
}
